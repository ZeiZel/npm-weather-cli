// –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
import axios from "axios";
import https from "https";
import { getKeyValue, TOKEN_DICTIONARY } from "./storage.service.js";

// —Ç—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —á–∏—Å–ª—É
const getIcon = (icon) => {
	switch (icon.slice(0, -1)) {
		case "01":
			return "‚òÄÔ∏è";
		case "02":
			return "üå§Ô∏è";
		case "03":
			return "‚òÅÔ∏è";
		case "04":
			return "‚òÅÔ∏è";
		case "09":
			return "üåßÔ∏è";
		case "10":
			return "üå¶Ô∏è";
		case "11":
			return "üå©Ô∏è";
		case "13":
			return "‚ùÑÔ∏è";
		case "50":
			return "üå´Ô∏è";
	}
};

const getWeather = async (city) => {
	// –ø–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–∫–µ–Ω
	const token =
		process.env.TOKEN ?? (await getKeyValue(TOKEN_DICTIONARY.token));
	if (!token) {
		throw new Error(
			"–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–¥–∞–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É -t [API_KEY]"
		);
	}

	// —Ç–∞–∫ –∂–µ –º—ã –º–æ–∂–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π axios, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	const { data } = await axios.get(
		"https://api.openweathermap.org/data/2.5/weather",
		{
			params: {
				q: city,
				appid: token,
				lang: "ru",
				units: "metric",
			},
		}
	);
	return data;
};

export { getWeather, getIcon };
